/*------------------------------------------------------------------------------
              Copyright Butterfly Energy Systems 2014-2015, 2022.
           Distributed under the Boost Software License, Version 1.0.
              (See accompanying file LICENSE_1_0.txt or copy at
                    http://www.boost.org/LICENSE_1_0.txt)
------------------------------------------------------------------------------*/

/**
@namespace wamp
Namespace for all identifiers defined by the CppWAMP library.
*/

/**
@namespace wamp::error
Namespace containing exception types thrown by the CppWAMP library.
*/


/**
@mainpage
This is the reference documentation for the CppWAMP library. CppWAMP is a C++11
implementation of the [WAMP][wamp] protocol's client roles (caller, callee,
publisher, and subscriber).

The CppWAMP open-source project is hosted at
[https://github.com/ecorm/cppwamp][cppwamp], and is released under the
[Boost License][license].

For an **overview of the library's classes**, structs, typedefs, enums, etc.,
consult the @ref wamp Namespace Reference.

For a **tutorial-style overview**, please consult the @ref Tutorial page.

For some **example programs**, see:
- @ref examples/chat/main.cpp
- @ref examples/timeclient/main.cpp
- @ref examples/timeservice/main.cpp
- @ref examples/asynctimeclient/main.cpp
- @ref examples/asynctimeservice/main.cpp

For a brief **architectural overview** of the library, see @ref Architecture.

- - -

<b>Copyright &copy; 2014-2022 Butterfly Energy Systems</b>

@include LICENSE_1_0.txt

[wamp]: http://wamp.ws/
[cppwamp]: https://github.com/ecorm/cppwamp
[license]: http://www.boost.org/users/license.html
*/

/**
@page Tutorial Tutorial

1. @subpage VariantsTutorial &ndash; A `Variant` mimics a dynamic Javascript variable.
2. @subpage ConnectorsTutorial &ndash; A `Connector` is used for establishing client transport endpoints.
3. @subpage SessionsTutorial &ndash; How to establish a WAMP session using the coroutine-based client API.
4. @subpage ErrorsTutorial &ndash; How to handle runtime errors when using the coroutine-based client API.
5. @subpage RpcTutorial &ndash; How to register and invoke remote procedure calls.
6. @subpage PubSubTutorial &ndash; How to publish and subscribe to event topics.
7. @subpage AsyncTutorial &ndash; How to use the asynchronous client API.
8. @subpage ConversionsTutorial &ndash; How to convert `Variant` to/from custom types.
*/

/**
@page Architecture Architectural Overview

@tableofcontents

@section Layers Layers
![](layers.svg)

@section Client_API_UML Client API
![](client_api.svg)

@section Subriptions_UML Subscriptions
![](subscriptions.svg)

@section Registrations_UML Registrations
![](registrations.svg)

@section Messaging_UML WAMP Sessions and Messaging
![](messaging.svg)

@section Transport_Establishment_UML Transport Establishment
![](transport.svg)
*/

// Examples
/**
@example examples/chat/main.cpp
@example examples/timeservice/main.cpp
@example examples/timeclient/main.cpp
@example examples/asynctimeservice/main.cpp
@example examples/asynctimeclient/main.cpp
*/
