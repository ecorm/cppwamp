/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/


/**
@page Subscriptions Subscriptions

@tableofcontents


@section EventSlots Event Slots

A _slot_ is a _callable target_ that is invoked in response to a repeatable
event. The term _slot_, borrowed from [Qt's signals and slots][qt_sig], is used
to distinguish this sort of handler from an asynchronous operation completion
handler that is invoked only once.

A _callable target_ can be:
- a free function,
- a bound member function (using `std::bind`),
- a function object,
- a lambda function, etc.

[qt_sig]: https://doc.qt.io/qt-6/signalsandslots.html

An _event slot_ represents an event handler that does not have any expectations
on the event payload arguments. If necessary, the payload arguments must be
checked during runtime, in the body of the event handler.

wamp::Session::subscribe expects an event slot with the following signature:

```
void function(wamp::Event)
```

where wamp::Event is an object containing information and payload arguments
related to the publication.

The following table summarizes the different types of event slots that can
be used with the library:

| Slot Type                                                         | Wrapper Function                    | Slot Signature                                 |
|-------------------------------------------------------------------|-------------------------------------|------------------------------------------------|
| [Simple Event Slot](@ref SimpleEventSlots)                        | `wamp::simpleEvent<TArgs...>`       | `void function(TArgs...)`                      |
| [Simple Coroutine Event Slot](@ref SimpleCoroutineEventSlots)     | `wamp::simpleCoroEvent<TArgs...>`   | `void function(TArgs..., YieldContext)`        |
| [Unpacked Event Slot](@ref UnpackedEventSlots)                    | `wamp::unpackedEvent<TArgs...>`     | `void function(Event, TArgs...)`               |
| [Unpacked Coroutine Event Slot](@ref UnpackedCoroutineEventSlots) | `wamp::unpackedCoroEvent<TArgs...>` | `void function(Event, TArgs..., YieldContext)` |

where `Yield` represents the type `wamp::YieldContext`.

@section SimpleEventSlots Simple Event Slots

A _simple event slot_ represents an event handler that expects one or more
payload arguments having specific, static types. The [wamp::simpleEvent]
(@ref wamp::SimpleEventUnpacker::simpleEvent) function can be used when
registering such event slots. It takes a simple event slot, and converts it
into a regular event slot that can be passed to wamp::Session::subscribe.

`wamp::simpleEvent` expects an event slot with the following signature:

```
void function(TArgs...)
```
where `TArgs...` matches the template parameter pack that was passed to
`wamp::simpleEvent`.

Examples of simple event slots are:
```
void onSensorSampled(float value) { ... }
//                     ^
//                    TArgs

void onPurchase(std::string item, int cost, int qty) { ... }
//                      ^          ^          ^
//                      \----------|----------/
//                               TArgs
```

The above slots can be registered as follows:
```
session.subscribe("sensorSampled",
                  simpleEvent<float>(&onSensorSampled),
                  handler);

session.subscribe("itemPurchased",
                  simpleEvent<std::string, int, int>(&onPurchase),
                  handler);
```

where `handler` is the completion token for the **subscribe operation itself**.

Whenever a wamp::Session dispatches an event to the above slots, it
automatically unpacks the event payload positional arguments, and passes
them to the slot's argument list. If `Session` cannot convert the event payload
arguments to their target types, it emits an an error log entry that can be
captured via wamp::Session::listenLogged.


@section SimpleCoroutineEventSlots Simple Coroutine Event Slots

A _simple coroutine event slot_ is like a regular _simple event slot_, except
that it is executed within the context of a coroutine. This is useful for
event handlers that need to perform asynchronous operations themselves. The
[wamp::simpleCoroEvent](@ref wamp::SimpleCoroEventUnpacker::simpleCoroEvent)
function can be used when registering such event slots. It takes a simple
coroutine event slot, and converts it into a regular event slot that can be
passed to wamp::Session::subscribe.

`wamp::simpleCoroEvent` expects an event slot with the following signature:

```
void function(TArgs..., wamp::YieldContext)
```
where
- `TArgs...` matches the template parameter pack that was passed to
  `wamp::simpleEvent`.
- `wamp::YieldContext` is a completion token that can be passed to
   asynchronous operations.

Examples of simple coroutine event slots are:
```
void onSensorSampled(float value, YieldContext yield) { ... }
//                     ^
//                    TArgs

void onPurchase(std::string item, int cost, int qty, YieldContext yield) { ... }
//                      ^          ^          ^
//                      \----------|----------/
//                               TArgs
```

The above slots can be registered as follows:
```
session.subscribe("sensorSampled",
                  simpleCoroEvent<float>(&onSensorSampled),
                  handler);

session.subscribe("itemPurchased",
                  simpleCoroEvent<std::string, int, int>(&onPurchase),
                  handler);
```

where `handler` is the completion token for the **subscribe operation itself**.

Whenever a wamp::Session dispatches an event to the above slots, it
spawns a new coroutine to be executed on wamp::Session::userIosvc(). It then
automatically unpacks the event payload positional arguments, and passes
them to the slot's argument list. If `Session` cannot convert the event payload
arguments to their target types, it emits an an error log entry that can be
captured via wamp::Session::listenLogged.


@section UnpackedEventSlots Unpacked Event Slots

An _unpacked event slot_ represents an event handler that expects one or more
payload arguments having specific, static types. The [wamp::unpackedEvent]
(@ref wamp::EventUnpacker::unpackedEvent) function can be used when
registering such event slots. It takes an unpacked event slot, and converts it
into a regular event slot that can be passed to wamp::Session::subscribe.

`wamp::unpackedEvent` expects an event slot with the following signature:

```
void function(wamp::Event, TArgs...)
```
where
- wamp::Event is an object containing information and payload arguments related
  to the publication, and,
- `TArgs...` matches the template parameter pack that was passed to
  `wamp::unpackedEvent`.

@note Unpacked event slots differ from simple event slots in the following way:
      Unpacked event slots are passed a wamp::Event object, which contains
      metadata on the event itself.

Examples of unpacked event slots are:
```
void onSensorSampled(Event event, float value) { ... }
//                                  ^
//                                TArgs

void onPurchase(Event event, std::string item, int cost, int qty) { ... }
//                                  ^          ^          ^
//                                  \----------|----------/
//                                           TArgs
```

The above slots can be registered as follows:
```
session.subscribe("sensorSampled",
                  unpackedEvent<float>(&onSensorSampled),
                  handler);

session.subscribe("itemPurchased",
                  unpackedEvent<std::string, int, int>(&onPurchase),
                  handler);
```

where `handler` is the completion token for the **subscribe operation itself**.

Whenever a wamp::Session dispatches an event to the above slots, it
automatically unpacks the event payload positional arguments, and passes
them to the slot's argument list. If `Session` cannot convert the event payload
arguments to their target types, it emits an an error log entry that can be
captured via wamp::Session::listenLogged.


@section UnpackedCoroutineEventSlots Unpacked Coroutine Event Slots

An _unpacked coroutine event slot_ is like an [unpacked event slot]
(@ref UnpackedEventSlots), except that the slot is
executed within the context of a coroutine. The [wamp::unpackedCoroEvent]
(@ref wamp::CoroEventUnpacker::unpackedCoroEvent) function can be used when
registering such event slots.

`wamp::unpackedCoroEvent` expects an event slot with the following signature:

```
void function(wamp::Event, TArgs..., wamp::YieldContext)
```
where
- wamp::Event is an object containing information and payload arguments related
  to the publication, and,
- `TArgs...` matches the template parameter pack that was passed to
  `wamp::unpackedEvent`.
- `wamp::YieldContext` is a completion token that can passed to
   asynchronous operations.


@section EventSlotExecutorBinding Binding Executors to Event Slots

An event slot can be bound to an
[executor](https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/model/executors.html)
which determines how the slot invocation is queued and ultimately run. This
allows the slot to be executed in a different context than the one used by
wamp::Session. For example, a slot could be bound to an executor associated
with a boost::asio::thread_pool.

[boost::asio::bind_executor](https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/bind_executor.html)
is used to bind an executor to a call slot.

If no executor is bound to an event slot, CppWAMP will automatically bind
wamp::Session::userExecutor() to it. If no user executor was specified during
wamp::Session construction, then it defaults to the primary executor passed
during construction.


@section ScopedSubscriptions Scoped Subscriptions

A wamp::ScopedSubscription object can be used to limit a subscription's
lifetime to a particular scope. When a `ScopedSubscription` object is destroyed,
it automatically unsubscribes the subscription. This helps in automating the
lifetime management of topic subscriptions using
[RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)
techniques.

Here's an example illustrating how `ScopedSubscription` can be used
to manage the lifetime of several subscriptions:

```
using namespace wamp;

class Observer // One of several classes using the same Session
{
public:
    void start(Session& session, YieldContext yield)
    {
        // The session has already connected and joined when this is called.

        auto s1 = session_.subscribe("foo", &Observer::onFoo, yield).value();
        auto s2 = session_.subscribe("bar", &Observer::onBar, yield).value();

        // Store scoped subscripions in private member
        subscriptions_.push_back(s1);
        subscriptions_.push_back(s2);
    }

private:
    static void onFoo(Event event)
    {
        std::cout << "Foo happened\n";
    }

    static void onBar(Event event)
    {
        std::cout << "Bar happened\n";
    }

    // When the Observer is destroyed, the stored elements will also be
    // destroyed, performing automatic unsubscription for each subscribed topic.
    std::vector<ScopedSubscription> subscriptions_;
};
```
*/
