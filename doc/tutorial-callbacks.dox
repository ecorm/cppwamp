/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page AsyncCallbacksTutorial Asynchronous Callbacks

@tableofcontents

The previous tutorials have used stackful routines to demonstrate CppWAMP.
Traditional "callback" handler functions can also be used with wamp::Session.

For asynchronous operations that can fail, `Session` expects a handler taking
an @ref wamp::ErrorOr "wamp::ErrorOr<T>" as a parameter. `ErrorOr<T>` makes it
difficult for handlers to ignore error conditions when accessing the result of
an asynchronous operation via its @ref wamp::ErrorOr::value "value" method.

The following example shows how to establish a connection using callback
handler functions:

```
#include <cppwamp/session.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);
    auto tcp = TcpHost("localhost", 8001).withFormat(json);

    // Asynchronously connect to the router, using a lambda function for
    // the handler
    session.connect(std::move(tcp), [](ErrorOr<size_t> result)
    {
        // Obtain the result of the connect operation, which is the index of
        // the connector used to establish the transport connection.
        // ErrorOr::get throws an error::Failure exception if the
        // operation failed.
        auto index = result.value();
    });

    ioctx.run();
    return 0;
}
```

Instead of letting wamp::ErrorOr::value throw an exception upon failure,
@ref wamp::ErrorOr::operator bool() and wamp::ErrorOr::error can be
used to check the error status of an asynchronous operation:

```
using namespace wamp;
session.connect(std::move(tcp), [](ErrorOr<size_t> index)
{
    if (index)
    {
        std::cout << "Connected via transport #" << (index.value()+1) << "\n";
        // Continue as normal...
    }
    else
    {
        std::cerr << "Failure connecting: " << index.error() << "\n";
    }
});
```

The following example shows how to call member functions within asynchronous
handlers, and how to chain one asynchronous operation after another:

```
#include <cppwamp/session.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/tcp.hpp>

class App
{
public:
    explicit App(boost::asio::io_context& ioctx)
        : session_(ioctx)
    {}

    void start(ConnectionWish where)
    {
        session_.connect(
            std::move(where),
            [this](wamp::ErrorOr<size_t> index)
            {
                index.value(); // throws if connection failed
                this->join();
            });
    }

private:
    void join()
    {
        session_.join(Realm("somerealm"),
            [this](wamp::ErrorOr<wamp::Welcome> info)
            {
                sessionInfo_ = info.value(); // throws if join failed
                // Continue with other asynchronous operations...
            }
        );
    }

    wamp::Session session_;
    wamp::Welcome sessionInfo_;
};

int main()
{
    using namespace wamp;
    IoContext ioctx;
    App app(ioctx);
    app.start(TcpHost{"localhost", 8001}.withFormat(json));
    ioctx.run();
}
```

With this asynchronous style of programming, it is not immediately obvious how
the program control flows. Couroutines are therefore useful in implementing
asynchronous logic in a more synchronous, sequential manner.

For complete examples using the asynchronous API see:

- @ref examples/asynctimeclient/main.cpp
- @ref examples/asynctimeservice/main.cpp.

- - -

Next: @ref ConversionsTutorial

*/
