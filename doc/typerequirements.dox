/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

//------------------------------------------------------------------------------
/** @page TypeRequirements Type Requirements
Describes restrictions on types used by generic facilities.
- @subpage VisitorConcept
- @subpage CodecEncoder
- @subpage CodecDecoder
- @subpage CodecFormat
- @subpage Establisher
*/

//------------------------------------------------------------------------------
/** @page VisitorConcept Visitors

Concepts:
- @ref StaticVisitor
- @ref BinaryVisitor
- @ref OperandVisitor

@section StaticVisitor StaticVisitor

`StaticVisitor` is the C++ concept for a function object having `operator()`
overloads that can take any of wamp::Variant's bound types as a parameter.

Given:
- `visitor`: a `StaticVisitor` instance, and,
- `bound`: a reference to _any_ of wamp::Variant's bound types
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`),

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound)`                   | Returns a value of type `decltype(visitor)`\::`ResultType`

@section BinaryVisitor BinaryVisitor
`BinaryVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments of wamp::Variant's bound types. The overloads
must handle _every_ combination of Variant's bound types. To avoid
combinatorial explosion, the `operator()` overloads are typically template
functions that perform compile-time pattern matching, using type traits and
SFINAE.

Given:
- `visitor`: a `BinaryVisitor` instance, and,
- `left` and `right`: two wamp::Variant bound type references,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`vis(left, right)`                 | Returns a value of type `decltype(visitor)`\::`ResultType`

where `left` and `right` are references to _any_ of `Variant`'s bound types
(`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`).

@section OperandVisitor OperandVisitor
`OperandVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments.
This concept is required for the @ref applyWithOperand function. The
operator() overloads must handle _any_ of wamp::Variant's bound types as their
first argument. They must also handle a value or reference of type `O` for
their second argument, where `O` is the type of the `operand` argument passed
to `applyWithOperand`.

Given:
- `visitor`: an `OperandVisitor` instance,
- `bound`: a reference to _any_ of wamp::Variant's bound types, and,
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`)
- `operand`: an operand l-value or r-value reference,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound, operand)`          | Returns a value of type `decltype(visitor)`\::`ResultType`
*/

//------------------------------------------------------------------------------
/** @page CodecEncoder CodecEncoder
A `CodecEncoder` is a specialization of `wamp::SinkEncoder<TFormat, TSink>`
that supports operations for encoding a Variant into a destination codec format.

Given:
- `encoder`: a `wamp::SinkEncoder<TFormat, TSink>` instance
- `variant`: a reference to a const wamp::Variant
- `sink`: a value of type `TSink`

then the following expressions must be valid:

Expression                      | Effect
------------------------------- | ------
`encoder.encode(variant, sink)` | Encodes the variant into the given output sink.
*/

//------------------------------------------------------------------------------
/** @page CodecDecoder CodecDecoder
A `CodecDecoder` is a specialization of `wamp::SourceDecoder<TFormat, TSource>`
that supports operations for decoding a sequence of bytes in a codec format
into a wamp::Variant.

Given:
- `decoder`: a `wamp::SourceDecoder<TFormat, TSource>` instance
- `variant`: a reference to a wamp::Variant
- `source`: a value of type `TSource`

then the following expressions must be valid:

Expression                        | Effect
--------------------------------- | ------
`decoder.decode(source, variant)` | Decodes the source into the given variant, returning a std::error_code.
*/

//------------------------------------------------------------------------------
/** @page CodecFormat CodecFormat
A `CodecFormat` is a static-only class supporting the following expressions:

Expression          | Effect
------------------- | ------
`CodecFormat::id()` | Returns the `int` ID to use during raw socket handshaking.

The following classes meet the requirements of `CodecFormat`:
- wamp::Json
- wamp::Msgpack
- wamp::Cbor
*/

//------------------------------------------------------------------------------
/** @page Establisher Establisher
An `Establisher` is used by `internal::AsioEndpoint` to create and connect a
Boost.Asio socket.

Given
- `est`: an `Establisher` instance
- `handler`: a callable entity with the signature:

```
void (boost::system::error_code, Establisher::SocketPtr&&)
```

then:
- `Establisher` must be move-constrictible, and,
- the following expressions must be valid:

Expression               | Effect
------------------------ | ------
`Establisher::Socket`    | Yields the type of socket that the Establisher creates and connects.
`Establisher::SocketPtr` | Yields a shared pointer type to an Establisher::Socket.
`est.establish(handler)` | Establishes the socket connection, then calls `handler`.
`est.cancel()`           | Cancels an `establish` operation in progress.

If an `establish` operation is cancelled, it shall return, via the completion
handler,  an error code equivalent to `boost::system::errc::operation_canceled`.

The following classes meet the requirements of `Establisher`:
- `wamp::internal::TcpAcceptor`
- `wamp::internal::TcpOpener`
- `wamp::internal::UdsAcceptor`
- `wamp::internal::UdsOpener`
*/
