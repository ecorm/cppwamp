/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

//------------------------------------------------------------------------------
/** @page TypeRequirements Type Requirements
Describes restrictions on types used by generic facilities.
- @subpage VisitorConcept
- @subpage CodecEncoder
- @subpage CodecDecoder
- @subpage CodecFormat
- @subpage TransportConnector
- @subpage TransportSettings
*/

//------------------------------------------------------------------------------
/** @page VisitorConcept Visitors

Concepts:
- @ref StaticVisitor
- @ref BinaryVisitor
- @ref OperandVisitor

@section StaticVisitor StaticVisitor

`StaticVisitor` is the C++ concept for a function object having `operator()`
overloads that can take any of wamp::Variant's bound types as a parameter.

Given:
- `visitor`: a `StaticVisitor` instance, and,
- `bound`: a reference to _any_ of wamp::Variant's bound types
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`),

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound)`                   | Returns a value of type `decltype(visitor)`\::`ResultType`

@section BinaryVisitor BinaryVisitor
`BinaryVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments of wamp::Variant's bound types. The overloads
must handle _every_ combination of Variant's bound types. To avoid
combinatorial explosion, the `operator()` overloads are typically template
functions that perform compile-time pattern matching, using type traits and
SFINAE.

Given:
- `visitor`: a `BinaryVisitor` instance, and,
- `left` and `right`: two wamp::Variant bound type references,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`vis(left, right)`                 | Returns a value of type `decltype(visitor)`\::`ResultType`

where `left` and `right` are references to _any_ of `Variant`'s bound types
(`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`).

@section OperandVisitor OperandVisitor
`OperandVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments.
This concept is required for the wamp::applyWithOperand function. The
operator() overloads must handle _any_ of wamp::Variant's bound types as their
first argument. They must also handle a value or reference of type `O` for
their second argument, where `O` is the type of the `operand` argument passed
to `applyWithOperand`.

Given:
- `visitor`: an `OperandVisitor` instance,
- `bound`: a reference to _any_ of wamp::Variant's bound types, and,
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`)
- `operand`: an operand l-value or r-value reference,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound, operand)`          | Returns a value of type `decltype(visitor)`\::`ResultType`
*/

//------------------------------------------------------------------------------
/** @page CodecEncoder CodecEncoder
A `CodecEncoder` is a specialization of `wamp::SinkEncoder<TFormat, TSink>`
that supports operations for encoding a Variant into a destination codec format.

Given:
- `encoder`: a `wamp::SinkEncoder<TFormat, TSink>` instance
- `variant`: a reference to a const wamp::Variant
- `sink`: a value of type `TSink`

then the following expressions must be valid:

Expression                      | Effect
------------------------------- | ------
`encoder.encode(variant, sink)` | Encodes the variant into the given output sink.
*/

//------------------------------------------------------------------------------
/** @page CodecDecoder CodecDecoder
A `CodecDecoder` is a specialization of `wamp::SourceDecoder<TFormat, TSource>`
that supports operations for decoding a sequence of bytes in a codec format
into a wamp::Variant.

Given:
- `decoder`: a `wamp::SourceDecoder<TFormat, TSource>` instance
- `variant`: a reference to a wamp::Variant
- `source`: a value of type `TSource`

then the following expressions must be valid:

Expression                        | Effect
--------------------------------- | ------
`decoder.decode(source, variant)` | Decodes the source into the given variant, returning a std::error_code.
*/

//------------------------------------------------------------------------------
/** @page CodecFormat CodecFormat
A `CodecFormat` is a static-only tag type class supporting the following
expressions:

Expression          | Effect
------------------- | ------
`CodecFormat::id()` | Returns the `int` ID to use during raw socket handshaking.

The following classes meet the requirements of `CodecFormat`:
- wamp::Json
- wamp::Msgpack
- wamp::Cbor
*/

//------------------------------------------------------------------------------
/** @page TransportConnector TransportConnector
A `TransportConnector` is a specialization of `wamp::Connector<TProtocol>` that
is used by `wamp::Session` to establish transport connections.

Given
- `t`: a `TransportConnector` instance
- `i`: a wamp::IoStrand instance
- `s`: an instance of `TransportConnector::Settings`
- `c` a number of type `int` for desired serialization format (codec ID)
- 'h' a handler with signature:

```
void (ErrorOr<Transporting::Ptr>)
```

then:
- `TransportConnector` must publicly inherit from the `wamp::Connecting`
  base class, and,
- the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
TransportConnector::Settings       | Yields the type containing transport settings.
`new TransportConnector(i, s, c)`  | Instantiates the connector.
`t->establish(std::move(h))`       | Starts establishing transport connection.
`t->cancel()`                      | Cancels transport connection establishment in progress.

If the `establish` operation is sucessful, it shall emit, via the completion
handler, a `Transporting::Ptr` for the newly established transport.

If the `establish` operation fails, it shall emit, via the completion
handler, a `std::error_code` corresponding to the failure.

If an `establish` operation is cancelled, it shall return, via the completion
handler, an `std::error_code` equivalent to `TransportErrc::aborted`.

The following classes meet the requirements of `TransportConnector`:
- `wamp::Connector<wamp::Tcp>`
- `wamp::Connector<wamp::Uds>`
*/

//------------------------------------------------------------------------------
/** @page TransportSettings TransportSettings
A `TransportSettings` contains the network/internet address of a transport,
as well as options pertaining to the transport (i.e. socket options).

The following expressions must be valid:

Expression                    | Effect
----------------------------- | ------
`TransportSettings::Protocol` | Yields the protocol tag type associated with the settings (e.g. wamp::Tcp)

The following classes meet the requirements of `TransportSettings`:
- `wamp::TcpHost`
- `wamp::UdsPath`
*/
