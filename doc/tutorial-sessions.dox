/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022-2023.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page SessionsTutorial Sessions

@tableofcontents

WAMP client operations are performed using the wamp::Session class.

Completion Tokens
-----------------

Asynchronous operations in wamp::Session accept a generic [completion token][1],
which can either be:
- a callback function (convertible to `wamp::AnyCompletionHandler`) taking a
  wamp::ErrorOr parameter,
- a [`yield_context`][2] (for [stackful coroutines][3]),
- [`use_awaitable`][4] (for [C++20 coroutines][5])
- [`use_future`][6] (for [`std::future`][7])

[1]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/model/completion_tokens.html
[2]: http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/yield_context.html
[3]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/composition/spawn.html
[4]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/use_awaitable_t.html
[5]: https://en.cppreference.com/w/cpp/language/coroutines
[6]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/use_future_t.html
[7]: https://en.cppreference.com/w/cpp/thread/future


ErrorOr
-------

The outcome of a `Session` asynchronous operation is emitted via
@ref wamp::ErrorOr "wamp::ErrorOr<T>", where `T` is the actual underlying
result type. An `ErrorOr` can contain either the actual result if successful,
or a [`std::error_code`][1] if the operation failed. The `ErrorOr::value`
method is used to retrieve the underlying result value, throwing a
`wamp::error::Failure` exception if there was an error.

`ErrorOr` emulates the proposed [`std:expected`][2].

The @ref ErrorsTutorial tutorial goes more in depth on using `ErrorOr`.

[1]: https://en.cppreference.com/w/cpp/error/error_code
[2]: https://wg21.link/P0323


Stackful Coroutines
-------------------

[Boost Asio's stackful coroutines][1] allow asynchronous logic to be written in
a synchronous manner. Due to the ease in following the logic, the following
tutorial pages will make use of stackful couroutines. Using asynchronous
callbacks is covered in @ref AsyncCallbacksTutorial.

wamp::spawn (which is an alias of [boost::asio::spawn][2]) is used to launch
stackful coroutines. `spawn` passes a wamp::YieldContext (which is an alias
of [boost::asio::yield_context][3]) to the coroutine, which can thereafter be
used as the completion token for `Session`'s asynchronous operations.

When passing a `YieldContext` to a `Session` asynchronous operation, the
operation will block within the coroutine until it is completed or fails.
While the operation is blocking, control is yielded to other pending
asynchronous operations via the I/O context.

When passed a `YieldContext`, the `ErrorOr` result of a `Session` operation
is returned directly by the member function's return value.

[1]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/composition/spawn.html
[2]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/spawn.html
[3]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_yield_context.html


Creating the Session Object
---------------------------

wamp::Session objects may be instantiated on the stack or the heap, depending
on the needs the application. When constructing a `Session`, you must pass it
an [I/O execution context][1] (or an [executor][2]) that will be used to perform
internal I/O operations. `Session` will extract a [strand][3] from this
execution context through which all of its internal I/O operations will be
serialized.

When constructing a `Session`, you may also optionally pass it a *fallback
executor* for use with your handlers that are to be executed by `Session`.
If `Session` does not detect a [bound executor][4] associated with your
handler, it will execute it via the fallback executor.

If no fallback executor is provided, `Session` will use its own, non-stranded
executor to execute your handlers.

The application is reponsible for the lifetime of the execution contexts that
are passed to `Session`.

[1]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/basics.html
[2]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/any_io_executor.html
[3]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/core/strands.html
[4]: https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/bind_executor.html

Here's an example of a Session that is constructed on the stack with a
boost::asio::io_context as its execution context:

```
#include <cppwamp/session.hpp>

int main()
{
    wamp::IoContext ioctx; // IoContext is an alias for boost::asio::io_context
    wamp::Session session(ioctx);
    // Do stuff with session.
    return 0;
}
```

Connecting and Joining
----------------------

After the session object is instantiated, the
@ref wamp::Session::connect "connect" operation is used to establish a
transport connection to a WAMP router. The
@ref wamp::Session::join "join" operation is then used to join a WAMP realm
on the router.

The following example shows how to spawn a coroutine, and how the
`yield_context` completion token is passed to the `connect` and `join`
operations.

```
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/codecs/json.hpp>
#include <cppwamp/transports/tcpclient.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        auto welcome = session.join("somerealm", yield).value();
        // etc.
    });

    ioctx.run();
    return 0;
}

```

Note that while a coroutine operation is suspended (while waiting for I/O to
complete), it yields control so that other asynchronous operations can be
executed via the I/O context.

Also note the `value()` method being invoked on `join`'s
`ErrorOr<Welcome>` result to obtain the underlying wamp::Welcome.
If there was an error during the join operation, `value()` would throw
a wamp::error::Failure exception.

Even though we're not interested in the result of the `connect` operation in
this example, the `value()` method is invoked anyway so that an exception is
thrown if there was a failure in the `connect` operation.

The @ref ErrorsTutorial tutorial covers how to manually check each operation
for errors instead of letting them throw.


Leaving and Disconnecting
-------------------------

To gracefully end a WAMP session, the @ref wamp::Session::leave "leave" and
@ref wamp::Session::disconnect "disconnect" operations are used:

```
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/codecs/json.hpp>
#include <cppwamp/transports/tcpclient.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join("somerealm", yield).value();

        while (!finished)
        {
            // Interact with the WAMP session
        }

        // Returns the reason URI and other details
        // from the router's GOODBYE message
        auto reason = session.leave(yield).value();

        session.disconnect(); // non-blocking
    });

    ioctx.run();
    return 0;
}
```

When a `Session` object is destroyed it will automatically perform a
disconnect operation if it is not already disconnected.

To abruptly end a WAMP session, you can skip the `leave` operation and just
disconnect. The router will see the transport being disconnected without
your session leaving. This may be useful when handling error conditions where
further attempts to communicate are futile.

```
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/codecs/json.hpp>
#include <cppwamp/transports/tcpclient.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;

    spawn(ioctx, [&](YieldContext yield)
    {
        Session session(ioctx);
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join("somerealm", yield).value();

        while (!finished)
        {
            // Interact with the WAMP session
        }

        // The session destructor will perform auto-disconnect when it
        // goes out of scope here.
    });

    ioctx.run();
    return 0;
}
```


Terminating
-----------

wamp::Session::terminate may be used to terminate all operations abruptly, while
prohibiting the execution of any pending completion handlers. This may be useful
when an application needs to terminate quickly and cannot prolong the lifetime
of any pending completion handlers.


Aborting Coroutine Operations
-----------------------------

All pending coroutine operations can be _aborted_ by dropping the client
connection via Session::disconnect. Pending post-join operations can be also
be aborted via Session::leave. Operations aborted in this manner will
contain an error code in their returned wamp::ErrorOr result. Except for RPCs,
there is currently no way to abort a single coroutine operation without
dropping the connection or leaving the realm.


Incidents
---------

A `wamp::Incident` is a spontaneous event that occurs within a `wamp::Session`
and that cannot be captured by a completion handler. An example of an incident
is a remote peer disconnecting. These are not the same as WAMP pub-sub events.

A handler for incidents may be registered via `wamp::Session::observeIncidents`.
Such a handler may, for example, log the incident, or attempt to reestablish
the session upon failure.

The incident handler must be callable entities with the
signature:
```
void handler(wamp::Incident)
```

Unless it already has a bound executor, the log handler is dispatched via
`Session::fallbackExecutor()`.


Authentication
--------------

CppWAMP supports the `AUTHENTICATE` and `CHALLENGE` messages used for WAMP
authentication. Algorithms for computing the cryptographic signatures needed
for the WAMP-CRA and WAMP-SCRAM methods are currently not provided by CppWAMP.
CppWAMP users must therefore compute these themselves using other cryptographic
libraries. Once computed, the signatures can be passed to CppWAMP via
wamp::Authentication.

To enable authentication, you must use a Session::join overload that takes
a challenge handler. The handler must be a callable entity
with the following signature:

```
void handler(wamp::Challenge)
```

Within the challenge handler, you must compute the cryptographic signature
(or ticket string) and send it back via wamp::Challenge::authenticate.

When later performing the session join operation, you must set the
authentication ID via wamp::Hello::withAuthId, as well as the
desired/supported authentication methods via wamp::Hello::withAuthMethods.

The following example shows how to perform ticket authentication.

```
#include <iostream>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/codecs/json.hpp>
#include <cppwamp/transports/tcpclient.hpp>

int main()
{
    using namespace wamp;

    IoContext ioctx;
    Session session(ioctx);
    std::string ticket;

    auto onChallenge = [&ticket, &session](wamp::Challenge challenge)
    {
        if (challenge.method() == "ticket")
        {
            challenge.authenticate(wamp::Authentication(ticket));
        }
        else
        {
            std::cerr << "Unexpected authentication method\n";
            session.disconnect();
        }
    };

    spawn(ioctx, [&](YieldContext yield)
    {
        ticket = "guest";
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Hello("somerealm").withAuthId("alice")
                                       .withAuthMethods({"ticket"}),
                     onChallenge,
                     yield).value();
        ticket.clear();
        // etc.
    });

    ioctx.run();

    return 0;
}
```

Handling Session State Changes
------------------------------

wamp::Session::listenStateChanged can be used to register a function that's
called whenever the session's wamp::SessionState changes. This can be used,
for example, to attempt reconnection when the session is disconnected due to a
network failure.

```
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/codecs/json.hpp>
#include <cppwamp/transports/tcpclient.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    auto rejoinSession = [&ioctx, &session](wamp::YieldContext yield)
    {
        auto tcp = wamp::TcpHost{"localhost", 8001}.withFormat(wamp::json);
        session.connect(std::move(tcp), yield).value();
        session.join("somerealm", yield).value();
        // Register RPCs, subscribe to topics, etc.
    }

    auto onStateChange = [&ioctx, &session](wamp::SessionState state)
    {
        if (state == wamp::SessionState::failed)
        {
            wamp::spawn(
                ioctx,
                [&session](wamp::YieldContext yield)
                {
                    // You may want to throttle and limit the reconnection
                    // attempts here.
                    rejoinSession(yield);
                });
        }
    }

    session.listenStateChanged(
        [&session](SessionState state) { onStateChange(state, session); });

    spawn(ioctx, [&](YieldContext yield)
    {
        rejoinSession(session, yield);
       // etc.
    });

    ioctx.run();
    return 0;
}
```


- - -

Next: @ref ErrorsTutorial

*/
