/*------------------------------------------------------------------------------
              Copyright Butterfly Energy Systems 2014-2015, 2022.
           Distributed under the Boost Software License, Version 1.0.
              (See accompanying file LICENSE_1_0.txt or copy at
                    http://www.boost.org/LICENSE_1_0.txt)
------------------------------------------------------------------------------*/

//------------------------------------------------------------------------------
/** @page Concepts Concepts
Describes restrictions on types used by generic facilities.
Concepts:
- @subpage VisitorConcept
- @subpage Codec
- @subpage TransportBuffer
- @subpage Transport
- @subpage Establisher
*/

//------------------------------------------------------------------------------
/** @page VisitorConcept Visitors

Concepts:
- @ref StaticVisitor
- @ref BinaryVisitor
- @ref OperandVisitor

@section StaticVisitor StaticVisitor

`StaticVisitor` is the C++ concept for a function object having `operator()`
overloads that can take any of wamp::Variant's bound types as a parameter.

Given:
- `visitor`: a `StaticVisitor` instance, and,
- `bound`: a reference to _any_ of wamp::Variant's bound types
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`),

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound)`                   | Returns a value of type `decltype(visitor)`\::`ResultType`

@section BinaryVisitor BinaryVisitor
`BinaryVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments of wamp::Variant's bound types. The overloads
must handle _every_ combination of Variant's bound types. To avoid
combinatorial explosion, the `operator()` overloads are typically template
functions that perform compile-time pattern matching, using type traits and
SFINAE.

Given:
- `visitor`: a `BinaryVisitor` instance, and,
- `left` and `right`: two wamp::Variant bound type references,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`vis(left, right)`                 | Returns a value of type `decltype(visitor)`\::`ResultType`

where `left` and `right` are references to _any_ of `Variant`'s bound types
(`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`).

@section OperandVisitor OperandVisitor
`OperandVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments.
This concept is required for the @ref applyWithOperand function. The
operator() overloads must handle _any_ of wamp::Variant's bound types as their
first argument. They must also handle a value or reference of type `O` for
their second argument, where `O` is the type of the `operand` argument passed
to `applyWithOperand`.

Given:
- `visitor`: an `OperandVisitor` instance,
- `bound`: a reference to _any_ of wamp::Variant's bound types, and,
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`)
- `operand`: an operand l-value or r-value reference,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound, operand)`          | Returns a value of type `decltype(visitor)`\::`ResultType`
*/

//------------------------------------------------------------------------------
/** @page Codec Codec
A `Codec` is a static-only class supporting the following expressions:

Expression                             | Effect
-------------------------------------- | ------
`Codec::id()`                          | Returns the `int` ID to use during raw socket handshaking.
`Codec::decodeBuffer(buffer, variant)` | Deserializes from a @ref TransportBuffer to a wamp::Variant.
`Codec::encodeBuffer(variant, buffer)` | Serializes from wamp::Variant to a @ref TransportBuffer.

where @ref TransportBuffer is the C++ concept for buffers used by the
transport layer.

`Codec::decodeBuffer` is expected to throw a
@ref wamp::error::Decode exception if it fails to deserialize the buffer.

The following classes meet the requirements of `Codec`:
- wamp::Json
- wamp::Msgpack
*/

//------------------------------------------------------------------------------
/** @page TransportBuffer TransportBuffer
A `TransportBuffer` holds a WAMP message in the format used for transmission
over the transport connection. A `TransportBuffer` must meet the following
requirements:

Given
- `buffer`: a `TransportBuffer` instance
- `d`: a `const char*` pointing to the first element of an array of bytes
- `n`: the number of bytes in the array pointed to by `d`

then the following expressions must be valid:

Expression           | Effect
-------------------- | ------
`buffer.length()`    | Returns the current length, in bytes, of the message data.
`buffer.data()`      | Returns a `const char*` pointing to the first message data byte.
`buffer.write(d, n)` | Appends `n` bytes from `d` to the buffer's message data.

The following classes meet the requirements of `Serializer`:
- `wamp::internal::AsioBuffer`

@see @ref Transport
*/

//------------------------------------------------------------------------------
/** @page Transport Transport
A `Transport` is used to transmit WAMP messages between peers. It must provide
the following minimal generic interface:

```
class MeetsTransport
{
public:
    // Shared pointer to a type meeting the TransportBuffer concept
    using Buffer = std::shared_ptr<MeetsTransportBuffer>;

    // Handler type called when a WAMP message is received
    using RxHandler = std::function<void (Buffer)>;

    // Handler type called when a transport error occurs
    using FailHandler = std::function<void (std::error_code ec)>;

    // Returns the maximum length of a message that can be transmitted.
    size_t maxSendLength() const;

    // Returns `true` if the transport has been started.
    bool isStarted() const;

    // Enables the receiving of messages on the transport.
    void start(RxHandler rxHandler, FailHandler failHandler);

    // Obtains a buffer to be used for filling in and sending messages.
    Buffer getBuffer();

    // Enqueues the given message for transmission.
    void send(Buffer message);

    // Closes the transport connection, aborting all pending send/receive
    // operations.
    void close();

    // Posts the given handler to the transport's I/O service.
    template <typename TFunctor>
    void post(TFunctor&& fn);
```

The following classes meet the requirements of `Transport`:
- `wamp::internal::AsioTransport`

@see @ref TransportBuffer
*/

//------------------------------------------------------------------------------
/** @page Establisher Establisher
An `Establisher` is used by `internal::AsioEndpoint` to create and connect a
Boost.Asio socket.

Given
- `est`: an `Establisher` instance
- `handler`: a callable entity with the signature:

```
void (boost::system::error_code, Establisher::SocketPtr&&)
```

then:
- `Establisher` must be move-constrictible, and,
- the following expressions must be valid:

Expression               | Effect
------------------------ | ------
`Establisher::Socket`    | Yields the type of socket that the Establisher creates and connects.
`Establisher::SocketPtr` | Yields a shared pointer type to an Establisher::Socket.
`est.establish(handler)` | Establishes the socket connection, then calls `handler`.
`est.cancel()`           | Cancels an `establish` operation in progress.

If an `establish` operation is cancelled, it shall return, via the completion
handler,  an error code equivalent to `boost::system::errc::operation_canceled`.

The following classes meet the requirements of `Establisher`:
- `wamp::internal::TcpAcceptor`
- `wamp::internal::TcpOpener`
- `wamp::internal::UdsAcceptor`
- `wamp::internal::UdsOpener`
*/
