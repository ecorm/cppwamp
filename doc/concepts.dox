/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

//------------------------------------------------------------------------------
/** @page Concepts Concepts
Describes restrictions on types used by generic facilities.
Concepts:
- @subpage VisitorConcept
- @subpage CodecEncoder
- @subpage CodecDecoder
- @subpage CodecFormat
- @subpage Transport
- @subpage Establisher
*/

//------------------------------------------------------------------------------
/** @page VisitorConcept Visitors

Concepts:
- @ref StaticVisitor
- @ref BinaryVisitor
- @ref OperandVisitor

@section StaticVisitor StaticVisitor

`StaticVisitor` is the C++ concept for a function object having `operator()`
overloads that can take any of wamp::Variant's bound types as a parameter.

Given:
- `visitor`: a `StaticVisitor` instance, and,
- `bound`: a reference to _any_ of wamp::Variant's bound types
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`),

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound)`                   | Returns a value of type `decltype(visitor)`\::`ResultType`

@section BinaryVisitor BinaryVisitor
`BinaryVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments of wamp::Variant's bound types. The overloads
must handle _every_ combination of Variant's bound types. To avoid
combinatorial explosion, the `operator()` overloads are typically template
functions that perform compile-time pattern matching, using type traits and
SFINAE.

Given:
- `visitor`: a `BinaryVisitor` instance, and,
- `left` and `right`: two wamp::Variant bound type references,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`vis(left, right)`                 | Returns a value of type `decltype(visitor)`\::`ResultType`

where `left` and `right` are references to _any_ of `Variant`'s bound types
(`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`).

@section OperandVisitor OperandVisitor
`OperandVisitor` is the C++ concept for a function object having `operator()`
overloads that take two arguments.
This concept is required for the @ref applyWithOperand function. The
operator() overloads must handle _any_ of wamp::Variant's bound types as their
first argument. They must also handle a value or reference of type `O` for
their second argument, where `O` is the type of the `operand` argument passed
to `applyWithOperand`.

Given:
- `visitor`: an `OperandVisitor` instance,
- `bound`: a reference to _any_ of wamp::Variant's bound types, and,
   (`Null`, `Bool`, `Int`, `UInt`, `Real`, `String`, `Array`, or `Object`)
- `operand`: an operand l-value or r-value reference,

then the following expressions must be valid:

Expression                         | Effect
---------------------------------- | ------
`decltype(visitor)`\::`ResultType` | Yields the common type returned by all `operator()` overloads
`visitor(bound, operand)`          | Returns a value of type `decltype(visitor)`\::`ResultType`
*/

//------------------------------------------------------------------------------
/** @page CodecEncoder CodecEncoder
A `CodecEncoder` is a class that supports operations for encoding a Variant
into a destination codec format.

Given:
- `encoder`: an `CodecEncoder` instance
- `variant`: a reference to a const wamp::Variant
- `output`: a reference to either a `std::string`, a `wamp::CodecBuffer`,
   or a `std::ostream`

then the following expressions must be valid:

Expression                        | Effect
--------------------------------- | ------
`encoder.encode(variant, output)` | Encodes the variant into the given output.

The following classes meet the requirements of `Encoder`:
- wamp::BasicCborEncoder
- wamp::BasicJsonEncoder
- wamp::BasicMsgpackEncoder
*/

//------------------------------------------------------------------------------
/** @page CodecDecoder CodecDecoder
A `CodecDecoder` is a class that supports operations for decoding a sequence of
bytes in a codec format into a wamp::Variant.

Given:
- `decoder`: a `CodecDecoder` instance
- `variant`: a reference to a wamp::Variant
- `input`: a reference to either a `const std::string`,
  a `const wamp::CodecBuffer`, or a `std::istream`

then the following expressions must be valid:

Expression                       | Effect
-------------------------------- | ------
`decoder.decode(input, variant)` | Decodes the input into the given variant, returning a std::error_code.

The following classes meet the requirements of `Decoder`:
- wamp::BasicCborDecoder
- wamp::BasicJsonDecoder
- wamp::BasicMsgpackDecoder
*/

//------------------------------------------------------------------------------
/** @page CodecFormat CodecFormat
A `CodecFormat` is a static-only class supporting the following expressions:

Expression                             | Effect
-------------------------------------- | ------
`CodecFormat::id()`                    | Returns the `int` ID to use during raw socket handshaking.
`CodecFormat::template Encoder<O, OC>` | Yields the type used to encode to outputs of type `O` and category `OC`
`CodecFormat::template Decoder<I, IC>` | Yields the type used to decode inputs of type `I` and category `IC`

where `OC` is either:
- wamp::ByteContainerOutputCategory
- wamp::StreamOutputCategory

and where `IC` is either:
- wamp::ByteArrayInputCategory
- wamp::StreamInputCategory

The following classes meet the requirements of `CodecFormat`:
- wamp::Json
- wamp::Msgpack
- wamp::Cbor
*/

//------------------------------------------------------------------------------
/** @page Transport Transport
A `Transport` is used to transmit WAMP messages between peers. It must provide
the following minimal generic interface:

```
class MeetsTransport
{
public:
    // Handler type called when a WAMP message is received
    using RxHandler = std::function<void (Buffer)>;

    // Handler type called when a transport error occurs
    using FailHandler = std::function<void (std::error_code ec)>;

    // Returns the maximum length of a message that can be transmitted.
    size_t maxSendLength() const;

    // Returns `true` if the transport has been started.
    bool isStarted() const;

    // Enables the receiving of messages on the transport.
    void start(RxHandler rxHandler, FailHandler failHandler);

    // Enqueues the given message for transmission.
    void send(wamp::CodecBuffer message);

    // Closes the transport connection, aborting all pending send/receive
    // operations.
    void close();

    // Obtains the transport's execution strand.
    boost::asio::strand<boost::asio::any_executor> strand() const;
```

The following classes meet the requirements of `Transport`:
- `wamp::internal::AsioTransport`
*/

//------------------------------------------------------------------------------
/** @page Establisher Establisher
An `Establisher` is used by `internal::AsioEndpoint` to create and connect a
Boost.Asio socket.

Given
- `est`: an `Establisher` instance
- `handler`: a callable entity with the signature:

```
void (boost::system::error_code, Establisher::SocketPtr&&)
```

then:
- `Establisher` must be move-constrictible, and,
- the following expressions must be valid:

Expression               | Effect
------------------------ | ------
`Establisher::Socket`    | Yields the type of socket that the Establisher creates and connects.
`Establisher::SocketPtr` | Yields a shared pointer type to an Establisher::Socket.
`est.establish(handler)` | Establishes the socket connection, then calls `handler`.
`est.cancel()`           | Cancels an `establish` operation in progress.

If an `establish` operation is cancelled, it shall return, via the completion
handler,  an error code equivalent to `boost::system::errc::operation_canceled`.

The following classes meet the requirements of `Establisher`:
- `wamp::internal::TcpAcceptor`
- `wamp::internal::TcpOpener`
- `wamp::internal::UdsAcceptor`
- `wamp::internal::UdsOpener`
*/
