/*------------------------------------------------------------------------------
              Copyright Butterfly Energy Systems 2014-2015, 2022.
           Distributed under the Boost Software License, Version 1.0.
              (See accompanying file LICENSE_1_0.txt or copy at
                    http://www.boost.org/LICENSE_1_0.txt)
------------------------------------------------------------------------------*/

/**
@page PubSubTutorial Publish-Subscribe

@tableofcontents

Publishing Events
-----------------

The session @ref wamp::CoroSession::publish "publish" operation is used to
publish events related to a topic. It takes a wamp::Pub object as a parameter,
which contains the following information related to the publication:

- the topic URI to publish under,
- positional wamp::Variant arguments, if applicable,
- a wamp::Object containing keyword arguments, if applicable, and,
- a wamp::Options dictionary for advanced WAMP features

```
using namespace wamp;
boost::asio::spawn(ioctx, [&](boost::asio::yield_context yield)
{
    auto session = CoroSession<>::create(tcp);
    session->connect(yield);
    session->join(ioctx, "somerealm", yield);

    // Publish a publication with no arguments
    session->publish(Pub("topic"));

    // Publish a publication with two positional arguments
    session->publish(Pub("topic").withArgs(12, "foo"), yield);

    // Publish a publication with a single keyword argument.
    // Also enable the 'disclose_me' advanced feature.
    session->publish( Pub("topic").withKwargs({{"name", "John"}})
                                  .withDiscloseMe() );
});
```

The above uses a non-blocking publish, which enqueues the publication for
transmission. If you need to obtain the publication ID of a published event,
then you need to use the "blocking" version that takes a yield context:

```
using namespace wamp;
PublicationId pid = session->publish(Pub("topic").withArgs(12, "foo"),
                                     yield);
```

Event Slots
-----------

CppWamp allows you to register callback functions that will be executed
whenever an event with a certain topic is received from a broker. Such callback
functions are named _event slots_. Event slots can be any callable entity that
can be stored into a [`std::function`][stdfunction]:
- free functions,
- member functions (via [`std::bind`][stdbind]),
- function objects,
- lambdas, etc.

[stdfunction]: http://en.cppreference.com/w/cpp/utility/functional/function
[stdbind]: http://en.cppreference.com/w/cpp/utility/functional/bind


Subscribing to Events
---------------------

@ref wamp::CoroSession::subscribe "subscribe()" is used to register an event
slot for a given topic:
```
using namespace wamp;
Subscription sub = session->subscribe(Topic("name"), slot, yield);
```
where:
- wamp::Subscription is a lightweight object that can be later used to
unsubscribe from the event,
- wamp::Topic is an object containing the topic URI, plus other optional
information related to advanced WAMP features, and,
- `slot` is the handler function to be invoked when an event with the given
topic is received.

`subscribe` expects a call slot with the following signature:
```
void function(wamp::Event)
```
where:
- wamp::Event is an object containing information and payload arguments
related to the event publication.

Example:
```
void onSensorSampled(Event event)
{
    float value = 0;
    event.args().convertTo(value); // throws if conversion fails
    std::cout << "Sensor sample value: " << value << "\n";
}

// Within coroutine
using namespace wamp;
auto sub = session->subscribe(
    Topic("sensor.").usingPrefixMatch(),
    &onSensorSampled,
    yield);
// :::
// Unsubscribing
sub.unsubscribe();
```

For a more in-depth discussion on subscriptions, consult the
@ref Subscriptions page.


Subscribing to Statically-Typed Events
--------------------------------------

Certain event handlers may expect a fixed number of statically-typed arguments.
For these situations, the
@ref wamp::BasicEventUnpacker::basicEvent "wamp::basicEvent" template function
can be used:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Subscription sub = session->subscribe(
    Topic("name"),
    basicEvent<StaticTypeList...>(slot),
    yield);
```
where:
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
   ```
   void function(StaticTypeList...)
   ```

Example:
```
void onSensorSampled(float value)
{
    std::cout << "Sensor sample value: " << value << "\n";
}

// Within coroutine
using namespace wamp;
session->subscribe(Topic("sensorSampled"),
                   basicEvent<float>(&onSensorSampled), yield);
//                            ^^^^^
//         Note that this type matches the one in onSensorSampled
```

When a statically-typed event handler needs the `wamp::Event` object, the
@ref wamp::EventUnpacker::unpackedEvent "unpackedEvent" template function can
be used instead:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Subscription sub = session->subscribe(
    Topic("name"),
    unpackedEvent<StaticTypeList...>(slot),
    yield);
```
where:
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
   ```
   void function(wamp::Event, StaticTypeList...)
   ```

Example:
```
void onSensorSampled(Event event, float value)
{
    std::cout << "Sensor sample value: " << value << "\n";
    std::cout << "Publication ID: " << event.pubId() << "\n";
}

// Within coroutine
using namespace wamp;
session->subscribe(Topic("sensorSampled"),
                   unpackedEvent<float>(&onSensorSampled), yield);
//                               ^^^^^
//         Note that this type matches the one in onSensorSampled
//         (following the Event parameter)
```


Registering Coroutine Event Handlers
------------------------------------

If the event handler must perform it's work in an asynchronous fashion within
the context of a coroutine, then
@ref wamp::BasicCoroEventUnpacker::basicCoroEvent "wamp::basicCoroEvent" or
@ref wamp::CoroEventUnpacker::unpackedCoroEvent "wamp::unpackedCoroEvent" may
be used:

```
void sensorSampled(float value, boost::asio::yield_context yield)
{
    // Perform asynchronous operation within event handler
    session->call(Rpc("log.append").withArgs(value), yield);
}

// Within coroutine
using namespace wamp;
session->subscribe(Topic("sensor_sampled"),
                   basicCoroEvent<float>(&sensorSampled),
                   yield);
```

@note This will spawn a new coroutine every time the event handler is invoked.


Scoped Subscriptions
--------------------

A `wamp::ScopedSubscription` object can be used to limit a subscription's
lifetime to a particular scope. When a `ScopedSubscription` object is destroyed,
it automatically unsubscribes the subscription. This helps in automating the
lifetime management of topic subscriptions using
[RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)
techniques.

```
using namespace wamp;

{
    ScopedSubscription sub = session->subscribe(Topic("foo"), &onFoo, yield);
}
// The "foo" is automatically unsubscribed when the 'sub' scoped subscription
// goes out of scope here.
```

For a more practical example of using scoped subscriptions,
see @ref ScopedSubscriptions "Registrations/Scoped Subscriptions".

- - -

Next: @ref AsyncTutorial

*/
