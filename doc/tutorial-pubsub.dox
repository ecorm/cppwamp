/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page PubSubTutorial Publish-Subscribe

@tableofcontents

Publishing Events
-----------------

wamp::Session::publish operation is used to publish events related to a topic.
It takes a wamp::Pub object as a parameter, which contains the following
information related to the publication:

- the topic URI to publish under,
- positional wamp::Variant arguments, if applicable,
- a wamp::Object containing keyword arguments, if applicable, and,
- a wamp::Options dictionary for advanced WAMP features

The follwing example uses a non-blocking publish, which enqueues the
publication for transmission.

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(ioctx, "somerealm", yield).value();

        // Publish a publication with no arguments
        session.publish(Pub("topic"));

        // Publish a publication with two positional arguments
        session.publish(Pub("topic").withArgs(12, "foo"));

        // Publish a publication with a single keyword argument.
        // Also enable the 'disclose_me' advanced feature.
        session.publish( Pub("topic").withKwargs({{"name", "John"}})
                                     .withDiscloseMe() );
    });

    ioctx.run();
    return 0;
}
```

If you need to obtain the publication ID of a published event,
then you need to use the overload that takes a completion token:

```
using namespace wamp;
PublicationId pid = session.publish(Pub("topic").withArgs(12, "foo"),
                                    yield).value();
```

Event Slots
-----------

CppWamp allows you to register callback functions that will be executed
whenever an event with a certain topic is received from a broker. Such callback
functions are named _event slots_. Event slots can be any callable entity that
can be stored into a [`std::function`][stdfunction]:
- free functions,
- member functions (via [`std::bind`][stdbind]),
- function objects,
- lambdas, etc.

[stdfunction]: http://en.cppreference.com/w/cpp/utility/functional/function
[stdbind]: http://en.cppreference.com/w/cpp/utility/functional/bind


Subscribing to Events
---------------------

wamp::Session::subscribe is used to register an event slot for a given topic:

```
using namespace wamp;
Subscription sub = session.subscribe(Topic("name"), slot, yield);
```

where:
- wamp::Subscription is a lightweight object that can be later used to
unsubscribe from the event,
- wamp::Topic is an object containing the topic URI, plus other optional
information related to advanced WAMP features, and,
- `slot` is the handler function to be invoked when an event with the given
topic is received.

`subscribe` expects a call slot with the following signature:
```
void function(wamp::Event)
```
where:
- wamp::Event is an object containing information and payload arguments
related to the event publication.

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

// The event slot
void onSensorSampled(Event event)
{
    float value = 0;
    event.args().convertTo(value); // throws if conversion fails
    std::cout << "Sensor sample value: " << value << "\n";
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Subscribing to events
        auto sub = session.subscribe(
            Topic("sensor.").usingPrefixMatch(),
            &onSensorSampled,
            yield).value();

        // Unsubscribing
        sub.unsubscribe();
    });

    ioctx.run();
    return 0;
}
```

For a more in-depth discussion on subscriptions, consult the
@ref Subscriptions page.


Subscribing to Statically-Typed Events
--------------------------------------

Certain event handlers may expect a fixed number of statically-typed arguments.
For these situations, the
@ref wamp::SimpleEventUnpacker::simpleEvent "wamp::simpleEvent" template
function can be used:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Subscription sub = session.subscribe(
    Topic("name"),
    simpleEvent<StaticTypeList...>(slot),
    yield).value();
```
where:
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
   ```
   void function(StaticTypeList...)
   ```

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>
#include <cppwamp/unpacker.hpp>

// The event slot with static argument types
void onSensorSampled(float value)
{
    std::cout << "Sensor sample value: " << value << "\n";
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Subscribing to an event with static types.
        session.subscribe(Topic("sensorSampled"),
                          simpleEvent<float>(&onSensorSampled), yield);
        //                            ^^^^^
        //         Note that this type matches the one in onSensorSampled
    });

    ioctx.run();
    return 0;
}
```

When a statically-typed event handler needs the `wamp::Event` object, the
@ref wamp::EventUnpacker::unpackedEvent "unpackedEvent" template function can
be used instead:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Subscription sub = session.subscribe(
    Topic("name"),
    unpackedEvent<StaticTypeList...>(slot),
    yield).value();
```
where:
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
   ```
   void function(wamp::Event, StaticTypeList...)
   ```

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>
#include <cppwamp/unpacker.hpp>

// Event slot needing the Event object
void onSensorSampled(Event event, float value)
{
    std::cout << "Sensor sample value: " << value << "\n";
    std::cout << "Publication ID: " << event.pubId() << "\n";
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Subscribe with an event slot requiring the Event object.
        session.subscribe(Topic("sensorSampled"),
                          unpackedEvent<float>(&onSensorSampled), yield);
        //                              ^^^^^
        //         Note that this type matches the one in onSensorSampled
        //         (following the Event parameter)
    });

    ioctx.run();
    return 0;
}
```


Registering Coroutine Event Handlers
------------------------------------

If the event handler must perform it's work in an asynchronous fashion within
the context of a coroutine, then
@ref wamp::SimpleCoroEventUnpacker::simpleCoroEvent "wamp::simpleCoroEvent" or
@ref wamp::CoroEventUnpacker::unpackedCoroEvent "wamp::unpackedCoroEvent" may
be used:

```
#include <cppwamp/corounpacker.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    // Event slot needing a coroutine context.
    auto sensorSampled =
        [&session](float value, YieldContext yield)
        {
            // Perform asynchronous operations within event handler
            session.call(Rpc("log.append").withArgs(value), yield).value();
        }

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Subscribe with a coroutine event handler.
        session.subscribe(Topic("sensor_sampled"),
                          simpleCoroEvent<float>(sensorSampled),
                          yield).value();
    });

    ioctx.run();
    return 0;
}
```

@note This will spawn a new coroutine every time the event handler is invoked.


Scoped Subscriptions
--------------------

A `wamp::ScopedSubscription` object can be used to limit a subscription's
lifetime to a particular scope. When a `ScopedSubscription` object is destroyed,
it automatically unsubscribes the subscription. This helps in automating the
lifetime management of topic subscriptions using
[RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)
techniques.

```
using namespace wamp;

{
    ScopedSubscription sub = session.subscribe(Topic("foo"), &onFoo, yield);
}
// The "foo" is automatically unsubscribed when the 'sub' scoped subscription
// goes out of scope here.
```

For a more practical example of using scoped subscriptions,
see @ref ScopedSubscriptions "Registrations/Scoped Subscriptions".

- - -

Next: @ref AsyncCallbacksTutorial

*/
