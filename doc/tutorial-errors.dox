/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page ErrorsTutorial Error Handling

@tableofcontents

This page describes how error handling is done via `ErrorOr`.

ErrorOr and Exceptions
----------------------

wamp::ErrorOr is a type that contains either a [`std::error_code`][error_code]
or an actual value. It is an minimalistic implementation of
[std::expected](https://wg21.link/P0323)<T, std::error_code>, and it used to
report the status of wamp::Session asynchronous operations. Whenever an
asynchronous operation fails, an wamp::ErrorOr containing a `std::error_code`
will be emitted via the completion handler instead of an actual result.

The wamp::ErrorOr::value method is used to retrieve the underlying result of
the asynchronous operation. If the `ErrorOr` actually contains an error,
`ErrorOr::value` will throw a wamp::error::Failure exception. Since `Failure`
derives from [`std::system_error`][system_error], it contains a
`std::error_code` that represents the cause of the error.

Example where `ErrorOr` is manually checked:

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        auto index = session.connect(std::move(tcp), yield);
        if (!index)
        {
            std::cerr << "Connect failed: " << index.error() << "\n";
            return;
        }

        auto info = session.join(Realm("somerealm"), yield);
        if (!info)
        {
            std::cerr << "Join failed: " << info.error() << "\n";
            return;
        }

        // etc.
    });

    ioctx.run();
    return 0;
}
```

Example where `ErrorOr::value` is allowed to throw exceptions:

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        try
        {
            auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
            session.connect(std::move(tcp), yield).value(); // Note the .value()
            session.join(Realm("somerealm"), yield).value(); // Note the .value()
            // etc.
        }
        catch (const error::Failure& e)
        {
            // Print a message describing the error
            std::cerr << e.what() << "\n";

            // Obtain the std::error_code associated with the exception
            auto ec = e.code();
            if (ec == WampErrc::noSuchRealm)
                std::cerr << "The realm doesn't exist\n";
            else
                std::cerr << "Unexpected error: " << ec << "\n";
        }
    });

    ioctx.run();
    return 0;
}
```

Error Codes
-----------

An error code can belong to any of the following categories:

Error category            | Values                | Used for reporting
------------------------- | --------------------- | ------------------
`wamp::GenericCategory`   | `wamp::Errc`          | general errors
`wamp::WampCategory`      | `wamp::WampErrc`      | WAMP protocol errors that map to error URIs
`wamp::DecodingCategory`  | `wamp::DecodingErrc`  | general deserialization errors
`wamp::TransportCategory` | `wamp::TransportErrc` | general transport layer errors
[`std::generic_category`][generic_category] | [`std::errc`][std_errc]           | OS-level socket errors
`jsoncons::json_error_category`             | `jsoncons::json_errc`             | JSON deserialzation errors
`jsoncons::cbor::cbor_error_category`       | `jsoncons::cbor::cbor_errc`       | CBOR deserialzation errors
`jsoncons::msgpack::msgpack_error_category` | `jsoncons::msgpack::msgpack_errc` | Msgpack deserialzation errors


Failed Preconditions
--------------------
Note that `Session` will always throw wamp::error::Logic exceptions
whenever preconditions are not met. Preconditions for API functions are listed
in this reference documentation.

[system_error]: http://en.cppreference.com/w/cpp/error/system_error
[error_code]: http://en.cppreference.com/w/cpp/error/error_code
[generic_category]: http://en.cppreference.com/w/cpp/error/generic_category
[std_errc]: https://en.cppreference.com/w/cpp/error/errc

- - -

Next: @ref RpcTutorial

*/
