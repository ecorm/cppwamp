/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page RpcTutorial Remote Procedure Calls

@tableofcontents

Calling RPCs
------------

The wamp::Session::call operation is used to call remote procedures. It takes
a wamp::Rpc object as a parameter, which contains the following information
related to the call:

- the procedure URI to call,
- positional wamp::Variant arguments, if applicable,
- a wamp::Object containing keyword arguments, if applicable, and,
- a wamp::Options dictionary for advanced WAMP features

If successful, `call` emits a wamp::Result object via the completion handler.
`Result` contains the result payload and other details returned by the callee.

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Call a remote procedure that takes no arguments
        Result result = session.call(Rpc("getElapsed"), yield).value();
        int elapsed = 0;
        result.convertTo(elapsed); // Will throw error::Conversion
                                   // if conversion fails
        std::cout << "The elapsed number of seconds is " << elapsed << "\n";

        // Call a remote procedure that takes two positional arguments
        auto sum = session.call(Rpc("add").withArgs(12, 34), yield).value();
        std::cout << "12 + 34 is " << sum[0] << "\n";

        // Call a remote procedure that takes a single keyword argument and
        // does not return any result. Also enable the 'disclose_me'
        // advanced feature.
        session.call( Rpc("setProperties").withKwargs({{"name", "John"}})
                                          .withDiscloseMe(),
                      yield ).value();
    });

    ioctx.run();
    return 0;
}
```

Call Slots
----------

CppWamp allows you to register callback functions that will be executed whenever
a procedure with a certain name is invoked remotely by a dealer. Such callback
functions are named _call slots_. Call slots can be any callable entity that can
be stored into a [`std::function`][stdfunction]:
- free functions,
- member functions (via [`std::bind`][stdbind]),
- function objects,
- lambdas, etc.

[stdfunction]: http://en.cppreference.com/w/cpp/utility/functional/function
[stdbind]: http://en.cppreference.com/w/cpp/utility/functional/bind


Registering Procedures
----------------------

wamp::Session::enroll is used to register a remote procedure call slot:

```
Registration reg = session.enroll(Procedure("name"), slot, yield);
```

where:
- @ref wamp::Registration "Registration" is a lightweight object that can be
later used to unregister the procedure,
- @ref wamp::Procedure "Procedure" is an object containing the procedure URI,
plus other optional information related to advanced WAMP features, and,
- `slot` is the handler function to be invoked for the registered RPC.

`enroll` expects a call slot with the following signature:
```
wamp::Outcome function(wamp::Invocation)
```
where:
- wamp::Outcome contains a wamp::Result or a wamp::Error object to be sent back
to the caller, and,
- wamp::Invocation is an object containing information and payload arguments
related to the RPC invocation.

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

wamp::Outcome addToCart(wamp::Invocation inv)
{
    std::string item;
    int cost;
    inv.convertTo(item, cost); // throws if conversions fail
    // Process invocation...
    int total = ...
    return {total}; // Send a single positional argument back to the caller
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Register the "addToCart" procedure
        auto reg = session.enroll(Procedure("addToCart").withDiscloseCaller(),
                                  &addToCart,
                                  yield).value();

        // Unregistering
        reg.unregister();
    });

    ioctx.run();
    return 0;
}
```

wamp::deferment may be returned in situations where the result cannot
be computed immediately within the asynchronous context of the RPC handler.
A use case for this would be an RPC handler that needs to invoke the RPC of
another service to complete the request. See @ref DeferredOutcomes
"Registrations/Deferred Outcomes" for an example.

For a more in-depth discussion of registrations in general, consult the
@ref Registrations page.


Registering Statically-Typed Procedures
---------------------------------------

Certain remote procedures may expect a fixed number of statically-typed
arguments. For these situations, the
@ref wamp::SimpleInvocationUnpacker::simpleRpc "wamp::simpleRpc" template
function can be used:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Registration reg =
    session.enroll(Procedure("name"),
                   simpleRpc<ReturnType, StaticTypeList...>(slot),
                   yield).value();
```
where:
- _ReturnType_ is the type returned by the RPC (may be `void`)
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
    ```
    ReturnType function(StaticTypeList...)
    ```

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>
#include <cppwamp/unpacker.hpp>

float sum(float x, float y)
{
    return x + y;
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Register a statically-type procedure.
        session.enroll(Procedure("sum"),
               simpleRpc<float, float, float>(&sum), yield).value();
        //               ^^^^^^^^^^^^^^^^^^^
        //  Note that these types match the ones in the 'sum' signature
        //  (return type, then parameter types).
    });

    ioctx.run();
    return 0;
}
```

If the `wamp::Invocation` object is required within a statically-typed RPC, or
if the RPC must return a `wamp::Outcome`, then the
@ref wamp::InvocationUnpacker::unpackedRpc "wamp::unpackedRpc" template
function can be used instead:
```
#include <cppwamp/unpacker.hpp>
// :::
using namespace wamp;
Registration reg = session.enroll(Procedure("name"),
                                  unpackedRpc<StaticTypeList...>(slot),
                                  yield).value();
```
where:
- _StaticTypeList..._ is a parameter pack of static types
- _slot_ has the signature:
   ```
   wamp::Outcome function(wamp::Invocation, StaticTypeList...)
   ```

Example:
```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>
#include <cppwamp/unpacker.hpp>

Outcome sum(Invocation inv, float x, float y)
{
    return {x + y};
}

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Register a procedure needing the Outcome and Invocation.
        session.enroll(Procedure("sum"),
                       unpackedRpc<float, float>(&sum), yield).value();
        //                         ^^^^^^^^^^^^
        //  Note that these types match the ones in the 'sum' signature
        //  (following the Invocation parameter).
    });

    ioctx.run();
    return 0;
}
```

Registering Coroutine Procedures
--------------------------------

If the remote procedure must perform it's work in an asynchronous fashion
within the context of a coroutine, then
@ref wamp::SimpleCoroInvocationUnpacker::simpleCoroRpc "wamp::simpleCoroRpc" or
@ref wamp::CoroInvocationUnpacker::unpackedCoroRpc "wamp::unpackedCoroRpc" may
be used:

```
#include <cppwamp/corounpacker.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    auto getName =
        [&session](std::string id, YieldContext yield) -> std::string
        {
            // Perform asynchronous operation within RPC handler
            auto result = session.call(Rpc("db.lookup").withArgs(id), yield);
            return result.kwargs["name"];
        };

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Register a procedure that needs to be run within a coroutine.
        session.enroll(Procedure("getName"),
                       simpleCoroRpc<std::string, std::string>(getName),
                       yield).value();
    });

    ioctx.run();
    return 0;
}
```

@note This will spawn a new coroutine every time the RPC is invoked.


Returning an ERROR Response to the Callee
-----------------------------------------

A wamp::Error object can be returned from a call slot, which results in an
`ERROR` message being sent back to the callee. This would be used, for example,
when invalid arguments are passed to a remote procedure:

```
using namespace wamp;

Outcome addToCart(Invocation inv)
{
    std::string item;
    int cost = 0;
    try
    {
        inv.convertTo(item, cost);
    }
    catch (const error::Conversion& e)
    {
        // Send an ERROR back to caller
        return Error("wamp.error.invalid_argument")
                     .withArgs("expected [String, Int] arguments") );
    }

    // Process invocation...
    int total = computeTotal(currentTotal, item, cost);
    return {total}; // Send result back to caller
}
```

Alternatively, you can throw an `Error` object from a call slot:
```
using namespace wamp;

Outcome addToCart(Invocation inv)
{
    std::string item;
    int cost = 0;
    try
    {
        inv.convertTo(item, cost);
    }
    catch (const error::Conversion& e)
    {
        // Send an ERROR back to caller
        throw Error("wamp.error.invalid_argument")
                     .withArgs("expected [String, Int] arguments") );
    }

    // Process invocation...

    int total = computeTotal(currentTotal, item, cost);
    return {total}; // Send result back to caller
}
```

Capturing an ERROR Response from the Caller
-------------------------------------------

When calling an RPC, `ERROR` messages returned by the caller can be captured
via the `wamp::Rpc::captureError` option:

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        Error error;
        auto result = session.call(Rpc("foo").withArgs(42).captureError(error),
                                   yield);
        if (!result)
        {
            std::cout << "Got error URI: " << error.reason() << "\n"
                      << "with args: " << error.args() << "\n";
        }
    });

    ioctx.run();
    return 0;
}
```

@note Even if `Rpc::captureError` is not used, a `call` operation will still
      fail if the callee returns an `ERROR` message. It's just that the
      details within the `ERROR` message will be discarded and remain unknown
      to the caller.


Scoped Registrations
--------------------

A wamp::ScopedRegistration object can be used to limit an RPC registration's
lifetime to a particular scope. When a `ScopedRegistration` object is destroyed,
it automatically unregisters the RPC. This helps in automating the
lifetime management of RPC registrations using
[RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)
techniques.

```
using namespace wamp;

{
    ScopedRegistration reg = session.enroll(Procedure("rpc"), &rpc, yield);
}
// "rpc" is automatically unregistered when the 'reg' scoped registration
// goes out of scope here.
```

For a more practical example of using scoped registrations,
see @ref ScopedRegistrations "Registrations/Scoped Registrations".


Cancelling RPCs
---------------
If supported by the router, a caller may cancel an RPC in progress via any of
the following methods:
1. Use the @ref wamp::Session::call "Session::call" overloads taking a
  wamp::CallChit out parameter, then call
  @ref wamp::CallChit::cancel "CallChit::cancel".
2. Use wamp::Session::cancel, passing a wamp::CallChit.
3. Bind a Boost.Asio [cancellation slot]
  (https://www.boost.org/doc/libs/release/doc/html/boost_asio/overview/core/cancellation.html)
  to the completion token passed to @ref wamp::Session::call "Session::call".

A callee wanting to make an RPC interruptible may pass an additional
`interruptSlot` argument to the `enroll`
method.

Example interruptible callee:

```
#include <boost/asio/steady_timer.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    // This is not meant to be efficient or scalable! A more sophisticated
    // example would use a single timer object to implement a deadline queue.
    std::map<RequestId, std::shared_ptr<boost::asio::steady_timer>> timers;

    // The call slot
    auto delayedEcho =
        [&ioctx, &timers](std::string message,
                          YieldContext yield) -> std::string
        {
            int seconds;
            inv.convertTo(message, seconds);
            auto timer = std::make_shared<boost::asio::steady_timer>(ioctx);
            timers.emplace(inv.requestId(), timer);
            timer->expires_from_now(std::chrono::seconds(seconds);
            boost::system::error_code ec;
            timer->async_wait(yield[ec]);
            timers.erase(inv.requestId());
            if (ec = boost::asio::error::operation_aborted)
                throw Error{"myapp.remind_me.aborted"};
            return message;
        }

    // The interruption slot
    auto cancelEcho = [&timers](Interruption intr)
    {
        auto found = timers.find(intr.requestId());
        if (found != timers.end())
            found->second->cancel();
    }

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Note the additional InterruptSlot argument for enroll.
        auto reg = session.enroll(
            Procedure("myapp.remind_me"),
            simpleCoroRpc<std::string, std::string>(delayedEcho),
            cancelEcho,
            yield).value();

        // Etc.
    });

    ioctx.run();
    return 0;
}
```

Example caller issuing a call cancellation via wamp::CallChit:
```
#include <boost/asio/steady_timer.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Call a remote procedure that takes a while to respond.
        // Note that the overload taking a CallChit out parameter is used.
        CallChit chit;
        session.call(
            Rpc("getElapsed").withArgs("hello", 10),
            chit,
            [](ErrorOr<Result> result)
            {
                if (result)
                    std::cout << "Result: " << result.value() << "\n";
                else
                    std::cout << "Error: " << result.errorInfo() << "\n";
            });

        // Cancel the RPC before it completes.
        boost::asio::steady_timer timer(ioctx, std::chrono::seconds(5));
        timer.async_wait(yield);
        chit.cancel(CancelMode::kill);
    });

    ioctx.run();
    return 0;
}
```

Example caller issuing a call cancellation via a
[boost::asio::cancellation_signal]
(https://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/cancellation_signal.html)
```
#include <boost/asio/cancellation_signal.hpp>
#include <boost/asio/steady_timer.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // Prepare a cancellation signal that will be used to generate a
        // cancellation slot as well as triggerring the cancellation.
        boost::asio::cancellation_signal cancelSignal;

        // Start a timer that will cancel the call in 5 seconds.
        boost::asio::steady_timer timer(ioctx, std::chrono::seconds(5));
        timer.async_wait(
            [&cancelSignal](boost::system::error_code)
            {
                // The cancellation type is ignored by CppWAMP
                cancelSignal.emit(boost::asio::cancellation_type::total);
            });

        // Call a remote procedure using a cancellation slot bound to a stackful
        // coroutine completion token. Note the use of Rpc::withCancelMode which
        // specifies the default cancellation mode to use.
        auto result = session.call(
            Rpc("getElapsed").withArgs("hello", 10)
                             .withCancelMode(CancelMode::kill),
            boost::asio::bind_cancellation_slot(cancelSignal.slot(), yield));

        if (result)
            std::cout << "Result: " << result.value() << "\n";
        else
            std::cout << "Error: " << result.errorInfo() << "\n";
    });

    ioctx.run();
    return 0;
}
```

Call Timeouts
-------------

A remote procedure call can be set up to automatically cancel itself if a
result is not received within a certain time period. This is done using either:

- wamp::Rpc::withDealerTimeout: The router automatically cancels the RPCs if it
  times out.
- wamp::Rpc::withCallerTimeout: The client (CppWAMP) automatically sends a
 `CANCEL` message if the RPC times out.

The `withDealerTimeout` option requires that the router support call timeouts.
The `withCallerTimeout` option only requires that the router support call
cancellation.

With both methods, if timeout occurs, the callee will receive an `INTERRUPT`
message and the call handler will be passed the wamp::WampErrc::cancelled
error code.


Progressive Call Results
------------------------

TODO: Remove this section and write a streaming tutorial instead.

[Progressive call results]
(https://wamp-proto.org/wamp_latest_ietf.html#name-progressive-call-results)
is a WAMP feature that allows a sequence of partial results to be returned from
the same remote procedure call.

A callee wanting to provide progressive call results must:

- Make the wamp::Invocation object available to the RPC handler so that it may
  later be used to yield progressive results.
- Return wamp::deferment in the RPC handler so that CppWAMP knows
  results will be yielded later.
- Set the "progress" option of the intermediate `RESULT` messages via
  wamp::Result::withProgress.
- Return intermediate results via wamp::Invocation::yield.
- Return the final result via wamp::Invocation::yield *without* using
  wamp::Result::withProgress.

It may also be desirable to pass an interruption handler to the session
@ref wamp::Session::enroll "enroll" method, so that the callee may stop
yielding partial results in the event that the call is cancelled
(see [Progressive Call Result Cancellation]
(https://wamp-proto.org/wamp_latest_ietf.html#name-progressive-call-results)
in the WAMP specification).

The following example shows a callee registering an RPC that yields
progressive results at fixed time intervals:

```
#include <boost/asio/steady_timer.hpp>
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    IoContext ioctx;
    Session session(ioctx);
    std::set<RequestId> interruptions;

    auto countdown = [&session, &interruptions](Invocation inv) -> Outcome
    {
        // The first positional argument contains the count.
        unsigned count = 0;
        inv.convertTo(count);

        spawn(ioctx, [inv, &count, &ioctx](YieldContext yield)
        {
            boost::asio::steady_timer timer(ioctx);
            auto deadline = std::chrono::steady_clock::now();

            while (count > 0)
            {
                // Break out of the loop if this request was interrupted.
                auto found = interruptions.find(inv.requestId());
                if (found != interruptions.end())
                {
                    interruptions.erase(found);
                    return;
                }

                // Delay for one second.
                deadline += std::chrono::seconds(1);
                timer.expires_at(deadline);
                timer.async_wait(yield);

                // Yield intermediate results with the "progess" option.
                inv.yield(Result({count}).withProgress());

                --count;
            }

            // Yield the final result without the "progess" option.
            inv.yield(Result({count}));
        });

        return deferment;
    }

    auto interrupt = [&interruptions](Interruption intr) -> Outcome
    {
        // Make the coroutine in the countdown function break out of its loop.
        interruptions.insert(intr.requestId());
        return Error("wamp.error.canceled");
    }

    spawn(ioctx, [&session](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();
        session.enroll(Procedure("countdown"), countdown, interrupt,
                       yield).value();
    });

    ioctx.run();
    return 0;
}
```
A caller wanting to call an RPC with progressive call results must:

- Use Session::ongoingCall instead of Session::call.
- Pass a completion token that allows the resulting completion handler
  to be copied and invoked multiple times.

The following example shows a caller that calls the RPC from the previous
example:

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/spawn.hpp>
#include <cppwamp/tcp.hpp>

int main()
{
    using namespace wamp;
    IoContext ioctx;
    Session session(ioctx);

    spawn(ioctx, [&](YieldContext yield)
    {
        auto tcp = TcpHost{"localhost", 8001}.withFormat(json);
        session.connect(std::move(tcp), yield).value();
        session.join(Realm("somerealm"), yield).value();

        // The handler will remain in the Session's internal records
        // until either a non-progressive RESULT or an ERROR is received.
        session.ongoingCall(
            Rpc("countdown"),
            [](ErrorOr<Result> r)
            {
                unsigned n = 0;
                r.value().convertTo(n);
                std::cout << "Tick: " << n << "\n";
            });
    });
    ioctx.run();
    return 0;
}
```

- - -

Next: @ref PubSubTutorial

*/
