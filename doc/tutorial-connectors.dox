/*------------------------------------------------------------------------------
    Copyright Butterfly Energy Systems 2014-2015, 2022.
    Distributed under the Boost Software License, Version 1.0.
    http://www.boost.org/LICENSE_1_0.txt
------------------------------------------------------------------------------*/

/**
@page ConnectorsTutorial Connectors

@tableofcontents

wamp::Connecting is the abstract base class for objects that can establish
client transport endpoints.

The library currently supports two types of connectors:

Connector Factory                                                       | Declared in         | For Transport
----------------------------------------------------------------------- | ------------------- | -----------
@ref wamp::TcpHost::connector "connector<TCodec>(AnyExecutor, TcpHost)" | `<cppwamp/tcp.hpp>` | TCP raw socket
@ref wamp::UdsPath::connector "connector<TCodec>(AnyExecutor, UdsPath)" | `<cppwamp/uds.hpp>` | Unix domain socket

When creating a connector, you must specify which codec class (aka serializer)
to use for encoding WAMP messages. The following codecs are currently supported:

| Codec         | Declared in             |
| ------------- | ----------------------- |
| wamp::Json    | `<cppwamp/json.hpp>`    |
| wamp::Msgpack | `<cppwamp/msgpack.hpp>` |
| wamp::Cbor    | `<cppwamp/cbor.hpp>`    |

Connectors are created on the heap using the `wamp::connector` factory function
as shown in the examples below. `wamp::connector` returns a `std::shared_ptr`
to the newly created wamp::Connecting.

After you have created one or more connectors, you pass them to the session
API. The session object will then use these connectors while establishing a
transport connection to the router.


Creating a TCP Raw Socket Connector with the Json codec
-------------------------------------------------------

```
#include <cppwamp/json.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/tcp.hpp>
using namespace wamp;

AsioContext ioctx;   // AsioContext is an alias to boost::asio::io_context
auto tcp = connector<Json>(
    ioctx,           // The I/O context to use for asynchronous operations
    TcpHost(
        "127.0.0.1", // Host address
         8001        // Port number (could also be a service name string)
     )
);

// Create a `Session` object which shall later use the above connector
// when establishing a transport connection.
auto session = Session::create(tcp);
```

Creating a Unix Domain Socket Connector with the Msgpack codec
--------------------------------------------------------------

```
#include <cppwamp/session.hpp>
#include <cppwamp/msgpack.hpp>
#include <cppwamp/uds.hpp>
using namespace wamp;

AsioContext ioctx; // AsioContext is an alias to boost::asio::io_context
auto uds = connector<Msgpack>(
    ioctx,                 // I/O context to use for asynchronous operations
    UdsPath("path/to/uds") // Path name of the Unix domain socket
);

// Create a `Session` object which shall later use the above connector when
// establishing a transport connection.
auto session = Session::create(uds);
```

Specifying Extra Socket Options
-------------------------------

The wamp::TcpHost object allows you to specify extra socket options. See the
reference documentation for more details.

Likewise, the wamp::UdsPath object also allows you to specify extra socket
options.

This snippet below shows how to create a TCP connector with a specified maximum incoming message length, as well as with Nagle's algorithm disabled:

```
using namespace wamp;
auto tcp = connector<Json>(
    ioctx,
    TcpHost("127.0.0.1", 8001)
        .withMaxRxLength(RawsockMaxLength::MB_1)
        .withOptions(TcpOptions.withNoDelay())
);
```

Combining Connectors
--------------------

More than one `Connecting` can be passed to a session object. In such cases, the
session will successively attempt to establish a transport connection with each
of the connectors until one succeeds. This allows you to specify "fallback"
transports if the primary one fails to establish.

To achieve this, you must pass a `std::vector` of `Connecting` shared pointers
while creating session objects. The following example uses two `TcpConnector`
objects, each specifying a different serializer:
```
#include <cppwamp/json.hpp>
#include <cppwamp/msgpack.hpp>
#include <cppwamp/session.hpp>
#include <cppwamp/tcp.hpp>
using namespace wamp;

AsioContext ioctx;
auto tcpJson = connector<Json>(ioctx, TcpHost("localhost", 8001));
auto tcpPack = connector<Msgpack>(ioctx, TcpHost("localhost", 8001));

// Create a `Session` object which shall later use both of the above
// connectors (in succession) when establishing a transport connection.
auto session = Session::create({tcpJson, tcpPack});
```

- - -

Next: @ref SessionsTutorial

*/
